// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array stat0, stat1;

    /** Initializes the library. */
    function void init() {
        var int l0;
        let stat0 = Array.new(16);
        let stat1 = Array.new(16);

        let stat0[0] = 1;

        while (l0 < 15) {
            let l0 = l0 + 1;
            let stat0[l0] = stat0[l0 - 1] + stat0[l0 - 1];
        }

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            let x = -x;
        } 
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int arg0, int arg1) {
        let l0, l1, l2, l3, l4;

        let l4 = ((arg0 < 0) & (arg1 > 0)) | ((arg0 > 0) & (arg1 < 0));

        let arg0 = Math.abs(arg0);
        let arg1 = Math.abs(arg1);

        if (arg0 < arg1) {
            let l1 = arg0;
            let arg0 = arg1;
            let arg1 = l1;
        }

        while ((l2 - 1) < (arg1 - 1)) {
            if(~((stat0[l3] & arg1) = 0)) {
                let l0 = l0 + arg0;
                let l2 = stat0[l3] + l2;
            }
            let arg0 = arg0 + arg0;
            let l3 = l3 + 1;
        }

        if (l4) {
            let l0 = -l0;
        }

        return l0;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, con;

        let con = ((x < 0) & (y > 0)) | ((x > 0) & (y < 0));

        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) {
            return 0;
        }

        let q = Math.divide(x, 2 * y);

        if ((x - (2 * q * y)) < y) {
            if (con) {
                return -(2 * q);
            } else {
                return 2 * q;
            }
        }
        else {
            if (con) {
                return -((2 * q) + 1);
            } else {
                return (2 * q) + 1;
            }
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int arg0) {
        var int l0, l1, l2, l3;

        if (arg0 < 0) {
            Sys.error(4);
        }

        let l0 = 7;

        while (l0 > -1)  {
            let l1 = stat0[l0] + l3;
            let l2 = l1 * l1;
            if ((~(l2 > arg0)) & (~(l2 < arg0))) {
                let l3 = l1;
            }

            let l0 = l0 - 1;
        }
        return l3;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }

        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) {
            return b;
        }

        return a;
    }
}
