// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let ram[2048] = 14334;
        let ram[2049] = 2050;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array lcl;

        if (size < 1) {
            do Sys.error(5);
        }

        let lcl = 2048;

        // Find next fit
        while (lcl[0] < size) {
            let lcl = lcl[1];
        }

        // Heap overflow
        if (lcl + size > 16379) {
            do Sys.error(6);
        }

        if (lcl[0] > size + 2) {
            let lcl[size + 2] = lcl[0] - size - 2;

            if (lcl[1] = lcl + 2) {
                let lcl[size + 3] = lcl + size + 4;
            } else {
                let lcl[size + 3] = lcl[1];
            }

            let lcl[1] = lcl + size + 2;
        }

        let lcl[0] = 0;

        // return the base address of 
        // the newly created block
        return (lcl + 2);
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int size, next;

        let size = o - 2;
        let next = size[1];

        if (size[0] = 0) {
            let size[0] = size[1] - size - 2;
        }
        else {
            let size[0] = size[1] - size + next[0];
            if (next[1] = next + 2) {
                let size[0] = size + 2;
            } else {
                let size[1] = next[1];
            }
        } 
        return;
    }    
}
